#This script imports xls/ csv files from tablet program into one table, formats GPS, 
# deduplicates records and renames variables
#November 2022


#LIBRARIES------------
library(here)
library(readr)
library(readxl)
library(plyr)
library(stringr)
library(tidyr)

here::here()

#CETACEANS------------
# # # Read each file and write it to csv   
 valid_path <- (here::here("data/originals"))
   
 
    #1.
    #function to translate xlsx to csv, need to specify sheet
 sheet = "Cetaceans"
     
 csv_maker =function(f) {
     df = read_xlsx(f, sheet = sheet)
      write.csv(df, gsub("xlsx", "csv", f), row.names=FALSE) }
    
    #2. 
     files.to.read = list.files(valid_path, pattern="xlsx", full.names = T)
    
    #3. 
     lapply(files.to.read, csv_maker)
     
     #move to new folder
     move.files <- function(x){
       file.rename( from = file.path(valid_path, x) ,
                    to = file.path(paste(here::here(), "/data/",sheet, sep = ""), x) )
     }    
     
     #list csvs
     files.csv= list.files(valid_path, pattern="csv")
     
     lapply(files.csv, move.files)
    
    # Compile and clean variable data from csv----
     
    FILEpath <- (here::here("data/cetaceans"))
     
    Valid_tables <- list.files(path = FILEpath, pattern = "*.csv", full.names = T)
    valid_data <- ldply(Valid_tables, read_csv)
    
    summary(valid_data)
    
    # create a tibble for cleaned up validated data 
    ###
    valid_data<-valid_data  %>% # pipe - create a linear sequence of operations 
      mutate(LatD = as.numeric(str_sub(valid_data$StartPos,1,2)))%>%
      
    mutate(LatM = as.numeric(str_extract(valid_data$StartPos,"(?<=d).+(?=N)"))/60)%>%
      mutate(Latitude = LatD+LatM)%>%
      mutate(LongD = as.numeric(str_extract(valid_data$StartPos,"(?<=\\s).+(?=d)")))%>%
      mutate(LongM = as.numeric(str_extract(valid_data$StartPos,"[\\d\\.]+(?=W)"))/60)%>%
      mutate(Longitude = (LongD+LongM)*-1)%>%
      mutate(Port_Star = PS)%>%  # change field name to something that is clear
        mutate(Species = ifelse(Species == "nbw", "Northern Bottlenose",
                                ifelse(Species == "northen bottlenose", "Northern Bottlenose",
                                       Species)))%>%drop_na(Latitude)
    #deduplicate
    valid_data = valid_data[!duplicated(valid_data$DateT), ]
    
    Sharedata = valid_data%>%
      dplyr::select(DateT, Species, Latitude, Longitude,Min, Best, Max, Dist, Bearing, Port_Star, Behaviour, 
                    TimeEnd, Pic_no, Comments)
        
    
    #write csv
    write.csv(Sharedata, file = "data/cetacean_sightings_trip1.csv", row.names = FALSE)
    write_rds(Sharedata, "data/cetacean_sightings_trip1.rds")
    


#ENVIRONMENT----------------
    #uses csv_maker and move.files functions above

    sheet = "Environment"
    
    #2. check list is correct
    files.to.read 
    
    #3. 
    lapply(files.to.read, csv_maker)
    
    #4. function to move to new folder
     
           #list csvs
           files.csv = list.files(valid_path, pattern="csv")
           
           lapply(files.csv, move.files)
   
   # Compile and clean variable data from csv----
    
    FILEpath <- (here::here("data/Environment"))
    
    Valid_tables <- list.files(path = FILEpath, pattern = "*.csv", full.names = T)
    valid_data <- ldply(Valid_tables, read_csv)
    
    summary(valid_data)
    
    # create a tibble for cleaned up validated data 
    ###
    valid_data<-valid_data  %>% # pipe - create a linear sequence of operations 
      mutate(LatD = as.numeric(str_sub(valid_data$Pos,1,2)))%>%
      
      mutate(LatM = as.numeric(str_extract(valid_data$Pos,"(?<=d).+(?=N)"))/60)%>%
      mutate(Latitude = LatD+LatM)%>%
      mutate(LongD = as.numeric(str_extract(valid_data$Pos,"(?<=\\s).+(?=d)")))%>%
      mutate(LongM = as.numeric(str_extract(valid_data$Pos,"[\\d\\.]+(?=W)"))/60)%>%
      mutate(Longitude = (LongD+LongM)*-1)
    
    #deduplicate
    valid_data = valid_data[!duplicated(valid_data$DateT), ]
    
    Sharedata = valid_data%>%dplyr::select(-Pos, -LatD,-LatM, -LongD, - LongM,)
    
    
    #write csv
    write.csv(Sharedata, file = "data/Environment_trip1.csv", row.names = FALSE)
    write_rds(Sharedata, "data/Environment_trip1.rds")

#### import ship track ####
    headers = read.csv(here::here("data/originals/TOGT8LAURA.csv"), skip = 1, header = F, nrows = 1, as.is = T, stringsAsFactors = F)
    ship = read.csv(here::here("data/originals/TOGT8LAURA.csv"), skip = 2, header = F, stringsAsFactors = F)
    colnames(ship)= headers
    
    ship = ship%>%select(Latitude,Longitude, Year , Month, Day, Hour, Minute, Second, Depth)%>%
      mutate(Year = as.numeric(Year), Month = as.numeric(Month), Day = as.numeric(Day), Hour = as.numeric(Hour), 
             Minute = as.numeric(Minute),
             Second = as.numeric(Second), Depth = as.numeric(Depth))%>%filter(!is.na(Year))
    
    ship<-ship  %>% # fix lat long
      mutate(LatD = as.numeric(str_sub(ship$Latitude,1,2)))%>%
      mutate(LatM = as.numeric(str_extract(ship$Latitude,"(?<=-).+(?=-N)"))/60)%>%
      mutate(LatitudeD = LatD+LatM)%>%
      mutate(LongD = as.numeric(str_sub(ship$Longitude,1,3)))%>%
      mutate(LongM = as.numeric(str_extract(ship$Longitude,"(?<=-).+(?=-W)"))/60)%>%
      mutate(LongitudeD = (LongD+LongM)*-1)%>%
      mutate(Date = paste(Day, Month, Year,  sep = "/"))%>%
      mutate(Time = paste(Hour, Minute, Second, sep = ":"))%>%
      mutate(DateT = as.POSIXct(paste(Date, Time,  sep = ""), tz = "UTC", 
                                format = "%d/%m/%Y %H:%M:%S"))%>%
      mutate(UTC1 = format(as.POSIXct(DateT), "%Y-%m-%d %H:%M"))
      
      # deduplicate based on minute
    ship=ship[!duplicated(ship$UTC1), ]
    
    #write clean track for mapping
    ship = ship%>%select(Latitude = LatitudeD, Longitude = LongitudeD, Year, Date, Time, DateT, UTC1)
    
    write_csv(ship, "data/shipTrack.csv")
    write_rds(ship, "data/shipTrack.rds")
    